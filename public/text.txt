rose call home bro are red call home bro and violet call home bro are blue

const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})

const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})

const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})
const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})
const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})

const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})

const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})
const fs = require("fs")
const path = require("path")
const readline = require("readline")
const rl = readline.createInterface({
    input: fs.createReadStream("./public/text.txt"),
    output: process.stdout,
    terminal: false

})
let fileStream = fs.createReadStream(path.join(__dirname, "public", "text.txt"))
var content=[]
fileStream.on("data", (chunk) => {
    console.log(chunk.toLocaleString())
})
fs.readFile(path.join(__dirname, "public", "text.txt"), "utf-8", (err, content) => {
    if (!err) {
        content
        const _content = content.split(" ").map(chr => {
            if (chr == "hey") {
                return "call home bro"
            } else {
                return chr
            }
        }).join(" ")
        fs.writeFile(path.join(__dirname, "public", "text.txt"), _content, "utf-8", (err) => {
            if (err) {
                console.log(err)
            } else {
                console.log("writeFile success!!!")
                console.log(fs.readFileSync(path.join(__dirname, "public", "text.txt"), "utf-8"))
            }
        })
    }
})